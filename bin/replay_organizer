#!/usr/bin/env bash
set -eu

#Change ReplayDir value to where you want to save your replays
# Add or remove classes in WhiteListApps variable, if the ones included don't serve your needs

#This script is only intended to run with GPU-screen-recorder under -sc flag.
#It also doesn't have any functionality for native games unless you add its class to WhiteListApps variable.
#It simply checks if the window class has steam_* or exe in it, so it can fetch the window name and create a directory and move the replay into it.
#Something similar can be done with regular recordings.

GetWindowInfo() {

    case $XDG_SESSION_TYPE in

        x11)
            #Requires xdotool
            WindowClass="`xdotool getactivewindow getwindowclassname`"
            WindowTitle="`xdotool getactivewindow getwindowname`"
        ;;

        wayland)

            case $XDG_CURRENT_DESKTOP in

                KDE)
                    #Requires kdotool
                    WindowClass="`kdotool getactivewindow getwindowclassname`"
                    WindowTitle="`kdotool getactivewindow getwindowname`"
                ;;

                Hyprland)
                    #Requires jq
                    WindowClass="`hyprctl activewindow -j  | jq -r '.class'`"
                    WindowTitle="`hyprctl activewindow -j | jq -r '.title'`"
                ;;

                *)
                    echo "Unsupported desktop environment. Exiting."
                    exit 1
                ;;
            esac
        ;;

        *)
            echo "Unknown session type. Exiting."
            exit 1
        ;;
    esac
}

Notify () {

    #local ReplayName="$(basename --suffix=".mkv" "$1" )" # I don't know which one is more effecient for naming the thumbnail, basename or date
    local Date=$(date +"%Y-%m-%d_%H:%M:%S")
    #ffmpeg -i $1 -s 640x360 -ss 5 -vframes 1 "/tmp/thumb_$Date.png" slow, need to read ffmpeg's wiki
    ffmpegthumbnailer -i "$1" -q 0 -s 480 -o "/tmp/thumb_$Date.png" # comment it out if thumbs are useless

    case $(notify-send -a "GSR" "GSR" "$2 saved" -i "/tmp/thumb_$Date.png" --action play="Play $2" --action delete="Delete $2" -t 5000 -u normal) in

      play)
        xdg-open "$1" &> /dev/null & disown
      ;;
      delete)
        rm "$1"
      ;;
      *)
        rm "/tmp/thumb_$Date.png"
        exit 1
      ;;
    esac

    rm "/tmp/thumb_$Date.png"

}

OrganizeReplay() {

    GetWindowInfo
    local ReplayLocation="$1"
    local ReplayDir="${XDG_VIDEOS_DIR:-$HOME/Videos}/Replays" # change accordingly
    local WhiteListApps='^steam_app_|.exe|gamescope$|^Minecraft|RPCS3$' # add or remove per your needs

    if [[ ( $WindowClass =~ $WhiteListApps ) ]]; then
        mkdir -p "$ReplayDir/$WindowTitle"
        mv "$ReplayLocation" "$ReplayDir/$WindowTitle/"
        local ReplayLocation="$ReplayDir/$WindowTitle/$(basename "$ReplayLocation")"
    fi

    Notify "$ReplayLocation" "Replay"

}

case $2 in

    regular)
        Notify "$1" "Recoding"
    ;;

    replay)
        OrganizeReplay $1
    ;;

    *)
        echo "Script is intended to run after GPU-screen-recorder saves a replay with the "-sc path/to/script" argument"
    ;;

esac
